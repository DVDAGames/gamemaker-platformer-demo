<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

movementDirection = 1;

moveSpeed = 0.7;
gravityForce = 0.2;
terminalVelocity = 10;
horizontalSpeed = 0;
verticalSpeed = 0;
avoidLedges = 0; //whether the enemy turns around at a ledge
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enemeny movement

horizontalSpeed = movementDirection * moveSpeed;

//gravity
if(verticalSpeed &lt; terminalVelocity) {
    verticalSpeed += gravityForce;
}

//check if we are about to collide with a wall
if(place_meeting(x + horizontalSpeed, y, obj_wall)) {
    //iterate as long as object hasn't collided
    while(!place_meeting(x + sign(horizontalSpeed), y, obj_wall)) {
        x += sign(horizontalSpeed);       
    }
    
    horizontalSpeed = 0;
    
    movementDirection *= -1;
}

x += horizontalSpeed;

//check if we are about to collide with a wall
if(place_meeting(x, y + verticalSpeed, obj_wall)) {
    //iterate as long as object hasn't collided
    while(!place_meeting(x, y + sign(verticalSpeed), obj_wall)) {
        y += sign(verticalSpeed);       
    }
    
    verticalSpeed = 0;

    if(avoidLedges &amp;&amp; !place_meeting(x + (sprite_width) * movementDirection, y + (sprite_height / 2) + 5, obj_wall)) {
        movementDirection *= -1;
    }
}

y += verticalSpeed;

//enemy hit collision

if(place_meeting(x, y, obj_player)) {
    if(obj_player.y &lt; y - 8) {
        with(obj_player) {
            verticalSpeed = -jumpSpeed
        }
        
        instance_destroy();
    } else {
        game_restart();
    }       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
